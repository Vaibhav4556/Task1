What is the difference between statically typed and dynamically typed languages?

=>1)Statically typed languages
     
     A language is statically typed if the type of a variable is known at compile time. For some languages this means that you as the programmer must specify what type each variable is; other languages (e.g.: Java, C, C++) offer some form of type inference, the capability of the type system to deduce the type of a variable (e.g.: OCaml, Haskell, Scala, Kotlin).

The main advantage here is that all kinds of checking can be done by the compiler, and therefore a lot of trivial bugs are caught at a very early stage.

Examples: C, C++, Java, Rust, Go, Scala


2)Dynamically typed languages
  
   A language is dynamically typed if the type is associated with run-time values, and not named variables/fields/etc. This means that you as a programmer can write a little quicker because you do not have to specify types every time (unless using a statically-typed language with type inference).

Examples: Perl, Ruby, Python, PHP, JavaScript, Erlang

Most scripting languages have this feature as there is no compiler to do static type-checking anyway, but you may find yourself searching for a bug that is due to the interpreter misinterpreting the type of a variable. Luckily, scripts tend to be small so bugs have not so many places to hide.

Most dynamically typed languages do allow you to provide type information, but do not require it. One language that is currently being developed, Rascal, takes a hybrid approach allowing dynamic typing within functions but enforcing static typing for the function signature.


#####Scripting Language vs Programming Language 
===>>
All scripting languages are programming languages.

Languages are not classed as script or not - it entirely depends on the execution environment.

If the environment is one that is interpreted, this is commonly referred to as a scripting environment.

5

Scripted languages
Scripting languages are interpreted within another program. JavaScript is embedded within a browser and interpreted by that browser.

Examples of scripting languages

JavaScript
Perl
Python
Advantages of Scripting languages:

Simple – Scripting languages are easier to write than programming language.

Fewer Lines of Code (LOC)

Programmed languages
Programming languages like Java are compiled and not interpreted by another application in the same way.

Examples programming languages

C
C++ and
Java


###   Programming Paradigms   ###


A programming paradigm is a style, or “way,” of programming.

# Imperative: Programming with an explicit sequence of commands that update state.

# Declarative: Programming by specifying the result you want, not how to get it.

# Structured: Programming with clean, goto-free, nested control structures.

# Procedural: Imperative programming with procedure calls.

# Functional (Applicative): Programming with function calls that avoid any global state.

# Function-Level (Combinator): Programming with no variables at all.

# Object-Oriented: Programming by defining objects that send messages to each other. Objects have their own internal (encapsulated) state and public interfaces. Object orientation can be:

# Class-based: Objects get state and behavior based on membership in a class.

# Prototype-based: Objects get behavior from a prototype object.

# Event-Driven: Programming with emitters and listeners of asynchronous actions.

# Flow-Driven: Programming processes communicating with each other over predefined channels.

# Logic (Rule-based): Programming by specifying a set of facts and rules. An engine infers the answers to questions.

# Constraint: Programming by specifying a set of constraints. An engine finds the values that meet the constraints.

# Aspect-Oriented: Programming cross-cutting concerns applied transparently.

# Reflective: Programming by manipulating the program elements themselves.

# Array: Programming with powerful array operators that usually make loops unnecessary.

Paradigms are not meant to be mutually exclusive; a single program can feature multiple paradigms!


